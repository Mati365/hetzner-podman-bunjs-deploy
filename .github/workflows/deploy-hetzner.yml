name: Deploy Hetzner PROD

on:
  push:
    branches:
      - hetzner

concurrency:
  group: deploy-hetzner-${{ github.ref }}
  cancel-in-progress: false

env:
  ANSIBLE_FORCE_COLOR: true
  TARGET_PLATFORMS: linux/arm64
  SEGMENT_DOWNLOAD_TIMEOUT_MINS: 2
  HCLOUD_KEY: '{{ secrets.HCLOUD_KEY }}'
  REGISTRY_PASSWORD: '{{ secrets.REGISTRY_PASSWORD }}'
  REGISTRY_USERNAME: '{{ secrets.REGISTRY_USERNAME }}'
  WEBSITE_DOMAIN: '{{ secrets.WEBSITE_DOMAIN }}'

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      apps: ${{ steps.changes.outputs.apps }}
      infra: ${{ steps.changes.outputs.infra }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - uses: dorny/paths-filter@v2
        id: changes
        with:
          base: ${{ github.ref }}
          filters: |
            infra: 'hetzner/**'
            apps:
              - 'apps/**'
              - 'packages/**'

  configure:
    runs-on: ubuntu-latest
    needs: [changes]
    if: always() && needs.changes.outputs.infra == 'true'

    timeout-minutes: 35
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - uses: actions/setup-python@v4
        with:
          python-version: "3.9"
          cache: "pip"

      - name: Install python3 deps
        run: pip3 install -r requirements.txt

      - name: Run ansible galaxy install
        working-directory: ./infra
        run: ansible-galaxy install -r ./requirements.yml

      - name: Export SSH keys
        working-directory: ./infra
        run: |
          mkdir -p keys/ansible
          echo "{{ secrets.SSH_PRIVATE_KEY }}" > keys/ansible/id_rsa
          openssl pkey -in keys/ansible/id_rsa -pubout  > keys/ansible/id_rsa.pub

      - name: Run configure playbook
        working-directory: ./infra
        run: ansible-playbook ./configure.yml

  deploy-docker-images:
    runs-on: ubuntu-latest
    needs: [changes, configure]
    if: |
      always()
        && needs.changes.outputs.apps == 'true'
        && (needs.configure.result == 'success' || needs.configure.result == 'skipped')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: "20"
          cache: "yarn"

      - name: Install dependencies
        run: yarn install --frozen-lockfile --prefer-offline --production=false

      - name: Turbo Cache
        uses: actions/cache@v3
        with:
          path: .turbo
          key: turbo-${{ github.job }}-${{ github.ref_name }}-${{ github.sha }}
          restore-keys: |
            turbo-${{ github.job }}-${{ github.ref_name }}-

      - name: Build packages
        run: yarn build

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to registry
        uses: docker/login-action@v2
        with:
          registry: ${{ needs.branch_meta.outputs.site_name }}.p8curio.com
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: buildx-${{ github.job }}-${{ github.ref_name }}-${{ github.sha }}
          restore-keys: |
            buildx-${{ github.job }}-${{ github.ref_name }}-

      - name: Push frontend
        uses: docker/build-push-action@v4
        with:
          context: "apps/frontend"
          push: true
          tags: ${{ needs.branch_meta.outputs.site_name }}.p8curio.com/surveys-frontend:latest
          platforms: ${{ env.TARGET_PLATFORMS }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
